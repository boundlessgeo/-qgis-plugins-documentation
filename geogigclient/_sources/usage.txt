Usage
=====

The GeoGig QGIS plugin allows you to manage/view GeoGig (http://geogig.org/)
repositories and layers as well as editing GeoGig layers using QGIS editing
capabilities.

This document describes the GeoGig plugin interface and tools, and shows how to perform typical workflows with the GeoGig plugin, going through its main features.


Installation
-------------

To install the plugin in QGIS (version 3.x is required), do the following:

- Clone this repository.

- Open a console in the cloned repository folder and type ``paver setup``. That will install all required dependencies.

- Type ``paver install``. That will move the plugin code to the plugin folder of the ``default`` user or create a symlink (depending on your OS). To install the plugin for a different user profile, you will have to move the code manually to the corresponding plugin folder.

GeoGig and the GeoGig Web API are required to use the plugin. To install them, follow the instructions in this repository: https://github.com/boundlessgeo/geogig-web


GeoGig plugin interface
---------------------------------

The :guilabel:`GeoGig navigator` panel is the plugin's primary tool to interact
with the GeoGig repositories. If the :guilabel:`GeoGig navigator` panel is not
visible, you can open it from QGIS's main menu - :menuselection:`Plugins -->
GeoGig --> GeoGig Navigator`.

.. figure:: img/navigator.png

   GeoGig Navigator panel

The navigator contains a tree with the GeoGgig WebAPI servers that are already defined. To define a connection to an existing GeoGig WebAPI server, right-click on the :guilabel:`Servers` item and then select :guilabel:`Add new server`. You will see the following dialog:

.. figure:: img/add_server.png

   Server definition dialog

Enter the URL of the server and the name to identify it. Click on OK and the server will be added to the navigator.

.. figure:: img/server_in_navigator.png

   Server item in Navigator

To see the content of the server and start working with its data, you must first connect to it. Right-click on the server item and select :guilabel:`Connect`. You will be prompted to enter your user name and password. If no users have been defined, you can log in using the admin credentials.

Once connected, the navigator will show the contents of that server under its item.

.. figure:: img/server_content.png

   Server content in navigator

Working with the GeoGig plugin is mostly done using the right-click context menus of the different items in the navigator tree. We will now describe some common workflows and explain the required commands for each of them.

Basic workflow (single user / single repo)
------------------------------------------

In the simplest case, you can use GeoGig to track the changes to one or several layers, using a single repository that won't share its data with other repositories (no collaboration from other users and similar repositories).

To do this, you must follow the steps described next:

#. To create a new repository, right-click on the :guilabel:`My repos` item and select :guilabel:`Create repository`. Enter the repository name and click on OK. The repository will be added to the tree.
#. In QGIS, open the layer you want to store in the repository. Only vector layers are supported. All formats are supported.
#. Right-click on the repository item in the GeoGig Navigator and select :guilabel:`Add layer...`. You will be prompted to select the QGIS layer that you want to add and the commit message that you want to use to describe the change that will be made in the repository (in this case, something like 'Added layer [your layer name] from [...]'). Click on OK and the layer will be uploaded to the repository.
#. The original layer can now be discarded, since it is now a GeoGig layer. To work with a GeoGig layer (that is, a layer that is managed by the GeoGig plugin and will update the corresponding repository whenever you edit it), you have to connect to it. Right-click on the layer name under the :guilabel:`Layers` item and select :guilabel:`Add to QGIS project (geopackage)` or :guilabel:`Add to QGIS project (live link)`. To know more about the differences between geopackage and live layers, see `here <gpkgandlivelayers.html>`_.
#. Once the layer is added to the QGIS project from the repository, you can edit it normally using the QGIS editing functionalities. When you close the editing session, the plugin will ask you if you want to add those changes to the repository.
#. Enter a commit message, and a new message will be created. If you do not want to commit your changes to you repo, select the corresponding option. When you do not commit the changes, they will only be stored locally in the layer, and can be committed the next time you edit the layer.
#. You can commit pending local changes to the repo at anytime, right-clicking on the layer in the QGIS layers-list (not in the GeoGig Navigator) and selecting :menuselection:`GeoGig --> Commit local changes`
#. Local changes are stored along with the QGIS project, so, if you have saved your project, when you reopen it, and the GeoGig plugin will still know the modified features in your layer are not yet committed in the repository.

Collaboration workflow (multiple users / original repo + forked repos)
------------------------------------------------------------------------

Several users can work on the same layer (or set of layers contained in a repo), and share their changes. Here is a description of the workflow in that case.

1. Start with a repository which already contains one or more layers, belonging to a given user (user A). You can collaborate with that repo if you can access the corresponding server, even without having permission to edit the repository.

2. Log in to the server with your user credentials and find the repository (belonging to user A) to work on. Right-click on it in the Navigator tree and select :guilabel:`Fork repo` to create a repo where you can make independent modifications. You will be prompted to enter the name of your new repository. Enter it and click on OK. The new repository will be added under your :guilabel:`My repos` item, with a note indicating that it is a forked repository.

.. figure:: img/forked_repo.png

   Forked repository

3. Connect to the layer you want to work on from the forked repository into your current QGIS project (see the basic workflow, above).

4. Edit the layer normally and add the changes to the repository (your repository fork) as explained in the basic workflow.

- If you are using a live layer, it should be up to date with the repository, since the layer content is updated each time the layer features have to be rendered. For geopackage layers, there might be changes in the repository (if other people can edit it), so it's recommended to update to the current latest version. To do so, right-click on the layer in the QGIS layers list and select :guilabel:`Update to latest revision from server`.  Most of this is handled automatically when committing your changes.

5. Once you have finished editing the layer and you want to "move" those changes to the original repository (it might include several commits), click on the forked repository item and select :guilabel:`Create Pull Request...`. You will see the following dialog.

.. figure:: img/pull_requests_dialog.png

   Pull Requests dialog

6. In the dropdown list in the upper part of the dialog, the target repository has to be selected. This is the repository to which you want to contribute the changes. When a target repository is selected, the panel below the dropdown list shows the set of commits that are in the local repository but not in the target one. Clicking on any of the commits will display the changes it contains.

7. Enter a name for the Pull Request (PR). Click on OK. That will create the PR, and it will appear in the list of current ones for the target PR.

8. The changes included in the PR are not yet added to the original repository. Its owner (user A or any other user with enough permission to edit the repository) has to accept the PR. To accept a PR, find its corresponding item under the :guilabel:`Pull requests` item, right-click on it and select :guilabel:`Show details`.

.. figure:: img/pull_request_details.png

   Pull Request details

9. You can explore the content of the PR using the :guilabel:`Commits` and :guilabel:`Combined changes` tabs. If you agree with it, you can add its changes to the repository by clicking on the :guilabel:`Merge PR` button.  You can also click :guilabel:`Close PR` to delete the PR without incorporating its changes.

The constellation viewer
-------------------------

When working with several repositories, a helpful tool is the Constellation Viewer. It shows a global view of all the repositories that are related (forked).  It makes it easy to view difference between related repositories and move changes between them.

Repositories in a constellation can belong to different users.

To open the Constellation Viewer with the constellation corresponding to a given repository, right-click on the repository item and select :guilabel:`Show repo constellation`


.. figure:: img/constellation_viewer.png

   Constellation Viewer

You can operate with repositories and layers in the Constellation Viewer much like you do in the Navigator; both have similar functionality.

The repository that you selected in the Navigator is displayed with a red border. Repositories that belong to the logged user are displayed with a green border.

Repositories belonging to the logged user have more functionality enabled than those that belong to a different user.


Using a layer from a commit other that the most recent one in the repository
-----------------------------------------------------------------------------

When a layer is exported from the Navigator tree or from the Constellation Viewer, it will contain the features corresponding to the latest revision. In the case of a live layer, it will be updated whenever the map canvas extent changes, so you will always see the most recent data in your view. For geopkg layers, new changes in the server will not be fetched unless the user explicitly requests that to be done.

You can recover a layer not just at its most recent revision, but at any other one of its history, using the log dialog.

1. Select the layer in the Navigator. Right-click on it and select :guilabel:`Show log`. That will open the layer log, which shows a list of all commits that affect the selected layer.

.. figure:: img/log_dialog.png

   GeoGig log dialog

2. Select the commit from which you want to connect to. The changes introduced by the commit will be displayed in the lower part of the dialog.

3. Right-click on the commit and in the context menu you will see two menus to add the layer to the project at the selected commit: as a geopackage layer and as a live layer.

In the case of selecting a live layer, the layer will still fetch its content from the server each time the extent is changed, but it will not get it from the latest revision (which might be different to the latest one at the time of exporting the layer), as it happens when adding from the navigator, but always from the selected revision.

Notice that you can open the log for the whole repository, which will include all its commits, not just those that modify a given layer. To do this, right-click on the server repo, (not the layer item), and select :guilabel:`Show log` In this case, you will see more export options in the context menu, corresponding to all the layers in the repository.


Solving conflicts
------------------

Conflicts might appear when contributing changes to a repo using a Pull Request, or when committing to a repository in case that other people have modified that repository while you where doing your edits, adding changes that are in conflict with your ones (edited the same feature in a different way).

When conflicts arise, the GeoGig plugin will show you the conflict resolution dialog, which looks as shown below.

.. figure:: img/conflicts_dialog.png

   Conflict resolution dialog

Depending on the case, conflicts can happen in one or several layers.

On the left side of the dialog, you will find a list of all the conflicting
features, grouped by layer. Clicking a feature item will display the conflicting
values in the table and the canvas on the right side.

.. figure:: img/singleconflict.png

In the table, all the feature's attributes are shown in rows, and the
corresponding values for the two conflicting versions are shown in columns:

* :guilabel:`Remote`: The feature as it was modified in the remote repository.
* :guilabel:`Local`: The feature as it was modified in the local layer.

If conflicts have appeared when merging a Pull Request, the above column names will be *Current* and *PR*.

There are three additional columns in the table:

* :guilabel:`Before changes`: shows the **original** values from which both edits
  came, that is, the last common version of the feature.
* :guilabel:`ATTRIBUTES`: shows the name of the attributes.
* :guilabel:`Merged`: shows the resolution value for each attribute.

Conflicting values will be highlighted in a *bright yellow* background, and the
corresponding cell in the :guilabel:`Merged` column will be empty. If an
attribute has no conflict, its values will be displayed in a *white* background,
and will also be shown in the :guilabel:`Merged` column.

Solving an attribute conflict is done by selecting the value to use from any of
the three columns (*Remote*,  *Local*, *Origin*). Click the version to use, and
its value will be put in the *Merged* column.

.. figure:: img/conflictunsolved.png

   DESCRIPTIO attribute with an unsolved conflict

The row will not be shown as conflicted anymore.

.. figure:: img/conflictsolved.png

   DESCRIPTIO attribute with solved conflict

Once the conflict for a given attribute has been solved, you can still click a
cell to use its value in the merged feature. You can even do it for attributes
that have no conflicts.

Once you have solved all conflicts (that is, all the cells in the
:guilabel:`Merged` column are filled and there are no yellow cells in the
attribute table), the :guilabel:`Solve with merged feature` button will be
enabled. When you click it, the conflict for the current feature will be solved.

.. figure:: img/all_conflicts_solved.png

If for the selected feature conflict you want to use all the values from
either the :guilabel:`Remote` or the :guilabel:`Local` columns, you can use the
:guilabel:`Solve with local version` or :guilabel:`Solve with remote version`
buttons, respectively, to solve the conflict without having to select
the value manually for each conflicted attribute.

On the other hand, if for all conflicting features, in all layers, you wish to
keep either all the remote or all the local changes, next to :guilabel:`Resolve
all conflicts with`, click :guilabel:`Remote` or :guilabel:`Local`, respectively.

Use any of the above steps to resolve all conflicted features before closing the
:guilabel:`Merge conflicts` dialog.

After closing the conflicts window, the commit or PR merge operation will be finished.

In the case of conflicts while committing, if you close the dialog before solving all conflicts, the changes will be kept in the edit buffer, and you will have to re-commit them later to add them to the repository. The conflict resolution dialog will be shown when you try to commit the conflicted changes again, and you will have to solve all of them.

Quickstart
==========

This document provides a short introduction to the GeoGig QGIS plugin, through simple exercises that demostrate its main features.

What is GeoGig
----------------

GeoGig is a tool for versioning geospatial data.

The easiest way of using GeoGig is through the QGIS GeoGig plugin. It allows you to use all the functionality of QGIS to manage spatial data, and have the versioning capabilities of GeoGig at the same time.

GeoGig has a command-line interface and a web API. The plugin uses the web API to communicate with GeoGig. A VM is available which contains both GeoGig and the web API, as well as all the configuration of the backend (PostGIS) where spatial data is stored and managed by GeoGig.


What you need
--------------

You will need the following:

- A virtual machine (VM) with GeoGig configured and running. This will provide the GeoGig software that will take care of versioning your data. You can think of it as being a database that is listening and ready to provide spatial data or ingest it.

	A VM with GeoGig can be downloaded from here [URL]. 

	It contains repositories already populated with OpenStreet map data. This content has been created using data prepared by GeoFabrik, adding to the GeoGig repository different sets of changes.

	To learn more about how to start the VM, see `here <./vm.html>`_

	With the VM running, the GeoGig endpoint should be available at (http://localhost:8181/). Open that URL in your browser to verify that GeoGig is up an running.

	You should see something like this:

	.. figure:: img/swagger.png

- Sample layers and styles. You can use your own ones, but in the steps described in this tutorial we will use the layers found here [URL]. Feel free to use your own layers and styles, and adapt the steps accordingly.

- QGIS 3. We will be connecting to the GeoGig endpoint from QGIS and will do layer editing using QGIS editing features. QGIS 3 is required.

- GeoGig QGIS Plugin. The GeoGig QGIS plugin is needed to add GeoGig capabilities to QGIS. The plugin is not available yet in the QGIS plugins server, so it has to be installed manually.

	Download the latest version from `here <https://github.com/boundlessgeo/qgis-GeoGigclient-plugin/releases/download/v0.1.1/GeoGig-v0.1.1.zip>`_

	Install the plugin using the downloaded Zip file. In QGIS, open the Plugin manager and move to the "Install from ZIP" section. Select the file, click on "Install plugin", and the plugin should now be installed.

	.. figure:: img/installfromzip.png

	You will see a new "GeoGig" menu under the "Plugins" menu entry.

Connecting to the server
-------------------------

We have verified that the server is running, so we can connect to it from QGIS. That will allow us to later work with it and use it to version the data we work with in QGIS.

In the "Plugins/GeoGig" menu, select "GeoGig Navigator". That will open the GeoGig Navigator, the main interface to work with GeoGig servers. 

.. figure:: img/navigator.png

Since this is the first time you use the GeoGig QGIS plugin, there will be no servers configured. Right click on the "Servers" item in the Navigator, and select "Add new server...".

You will see the following dialog. 

.. figure:: img/newserver.png

Fill its fields as shown in the image above, and then click "OK".

Now the Navigator has one server, which corresponds to the GeoGig server that is running in the VM.

.. figure:: img/notconnected.png

We are however, not connected to it. Double-click on the server item and you will see the following dialog to enter server connection credentials.

.. figure:: img/credentials.png

The GeoGig server in the VM has several users configured. For this quickstart, we will use the following user credentials.

- Username: GISAnalyst
- Password: gisgis 

Once logged in, you can browse the content of the server and interact with it.

As it was said, the VM server already contains data, You can expand the server item to see that it contains repositories and layers. 

.. figure:: img/serverdata.png


Using a repository layer
--------------------------

The GeoGig instance that we are now connected to has a repo with several layers. If you go to the repository item, you will see those layers under the "Layers" item. 

Click on the "Buildings" layer item an you will see some information about that layer in the panel in the lower part of the Navigator.

.. figure:: img/layerinfo.png

Let's add the layer to the QGIS project. In the lower panel, click on the "Add to QGIS project (live layer)" link. A new layer will be added to your project. 

This is a "live" layer, which means that it is taking its content (the layer features, points in this case) directly from the GeoGig repository. Layers can be added using a gpkg file (the layer features are first stored in the gpkg file and that file is later opened in QGIS), which is more suitable for disconnected scenarios. In this quickstart, we will be using just live layers.

You will notice that the layer that you added has a style that is not the random single-symbol style used for vector layers. That is because the repository also contains a default style, so whenever you add that layer from the repository to a QGIS project, it will be set automatically. You can restyle the layer if you want to, as with any other layer.

Making changes
---------------

You can now edit the features in the "Buildings" layer, and your changes will be added to the repository, creating a new version of the layer.

Let's make the following changes.

Find the feature that represents the Lammert building. 

.. figure:: img/lammert.png

It's an office building, but it has no type assigned. Let's change its type to "office".

Once you are done, stop editing the layer. QGIS will ask you if you want to commit those changes to the layer, as it does normally. Accept that, and then the GeoGig plugin will show you a new dialog asking you if you want to send the changes to the repository as well.

Changes can be kept only locally (in your layer), and you can upload them to the GeoGig server anytime later. However, we want to have them uploaded now, so we will enter a commit message describing those changes and click on "OK".

.. figure:: img/commit.png

Changes will be uploaded. To verify that the repository has changed, you can 
open the log dialog. Right-click on the repository and select "Show log (diff viewer)"

.. figure:: img/log.png

You can see that it shows all the previous commits, and it has on top of the repository history the commit that we have just made.

Exploring changes
-------------------

The log dialog can be used to explore the changes introduced in the different commits of the repository history. Selecting any commit will cause the lower panel to update, and it will show the changes introduced in that commit. The commit details include the features that have been changed, and the type of change made.

When the log dialog is opened, the latest commit is automatically selected.

If the number of features changed is too large, it might not be interesting to visualize those changes using the diff viewer. Instead, a layer might be a better way of doing it.

You can add that layer to QGIS by right-clicking on the commit and selecting "Add DIFF layers to QGIS for this commit"

A new layer will be added, which contains only the modified features. The style is automatically set, so it is easy to identify the type of change that has taken place for each of them. For modified features, two features are added, containing both the old and new values.

Recovering a previous version
------------------------------

When you add a layer from the Navigator, as we have done before, it takes the most recent version available. If you add a live layer, that means that, with any refresh (such as the one that is performed when you change the canvas extent), it will download the most recent features, and those can change from one refresh to the next one, in case someone else has added new changes.

You can use an older version by adding the layer not from the Navigator but from the history dialog. 

Let's say that you want to recover the OSM layer as it was when you first added it to the repository. Open the history dialog, select the first commit (the one from which you want to add the layer), right-click on it and select "Add 'osm' layer to QGIS from this commit (live link)". The layer will be added, containing the original features of the layer.

You can see that we have now two copies of the OSM layer in our current project, and each of them points to a different version. That is not a problem, and you can work with them as you would work with any normal layer. You can also edit both of them, although it is recommended to work with the most current version when making edits, to avoid having conflicts when commiting changes to the server (conflict resolution is not discussed in this quickstar).

Creating a repository
----------------------

We have been using the data in the repositories contained in the VM. However, we can create our own repositories and populate them with any vector data that we have available in QGIS.

Right-click on the "My repos" item of the server and select "Create repository". Provide a name to describe the repository (we will use "testrepo"), and the repo will be added.

The repository contains no data and no commits. We will now add it.

Adding data to a repository
---------------------------

In order to add data to a GeoGig repository, first we have to load it into QGIS. Open the provided "buildings" layer. An associated style (the same as the one stored in the demo server for that layer) is provided as well, so the layer should use it.

Right-click the "testrepo" item in the Navigator and select "Add layer". You will see the following dialog.

.. figure:: img/addlayer.png

Enter "Added OSM layer" and click on "OK"

The layer content is now in the repository, and we have created the first commit. The style of the layer has also been uploaded to the repository and set as the default one for that layer.

You can check that by going to the repository history. . You will see the log containing the commit that you just made.

.. figure:: img/log2.png


If you want to do further work with the layer that you just have added, you cannot use the original layer anymore. Instead, you have to work with a layer that is linked to the repository.

Close your current QGIS project and start a new blank one. Then add the layer from the repository, as it was explained in a previous section.







